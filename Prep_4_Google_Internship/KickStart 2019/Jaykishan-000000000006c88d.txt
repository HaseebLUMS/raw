#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define N 200005
ll mod=998244353;
#define fast ios_base::sync_with_stdio(false);cin.tie(NULL)
ll powermodm(ll x,ll n,ll M){ll result=1;while(n>0){if(n % 2 ==1)result=(result * x)%M;x=(x*x)%M;n=n/2;}return result;}
ll power(ll _a,ll _b){ll _r=1;while(_b){if(_b%2==1)_r=(_r*_a);_b/=2;_a=(_a*_a);}return _r;}
ll gcd(ll a,ll b){while(a&&b)a>b?a%=b:b%=a;return a+b;}
ll lcm(ll a,ll b){return (max(a,b)/gcd(a,b))*min(a,b);}

bool check(vector< pair <ll,ll> > &v,ll x,ll y,ll k)
{
    for(int i=0;i<v.size();i++)
    {
        if(abs(v[i].ff-x) + abs(v[i].ss-y)>k)
        {
            return 0;
        }
    }
    return 1;
}
int main()
{
    fast;
    
    ll t;
    cin>>t;
    ll y=0;
    while(t--)
    {
        y++;
        ll n,m;
        cin>>n>>m;
        vector<ll> g[n*m + 1];
        string s[n];
        for(int i=0;i<n;i++)
        {
            cin>>s[i];
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(i==n-1 && j==m-1)
                {

                }
                else if(i==n-1)
                {
                    g[i*m + j].pb(i*m + j + 1);
                    g[i*m + j + 1].pb(i*m + j);
                }
                else if(j==m-1)
                {
                    g[i*m + j].pb((i+1)*m + j);
                    g[(i+1)*m + j].pb(i*m + j);
                }
                else
                {
                    g[i*m + j].pb(i*m + j + 1);
                    g[i*m + j + 1].pb(i*m + j);
                    g[i*m + j].pb((i+1)*m + j);
                    g[(i+1)*m + j].pb(i*m + j);
                }
            }
        }
        queue<ll> q;
        ll ans=1e18;
        bool visited[63500]={0};
        ll dis[63500]={0};
        for(int i=0;i<=63499;i++)
        {
            dis[i]=1e18;
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(s[i][j]=='1')
                {
                    q.push(i*m + j);
                    dis[i*m + j]=0;
                    visited[i*m + j]=1;
                }
            }
        }
        while(!q.empty())
        {
            ll x=q.front();
            q.pop();
            for(int i=0;i<g[x].size();i++)
            {
                if(visited[g[x][i]]==0)
                {
                    visited[g[x][i]]=1;
                    dis[g[x][i]]=min(dis[g[x][i]],dis[x]+1);
                    q.push(g[x][i]);
                }
            }
        }
        ll l=0;
        ll r=1e9;
        bool f=0;
        while(l<=r)
        {
            vector< pair <ll,ll> > v;
            ll mid=(l+r)/2;
       //     cout<<l<<" "<<r<<endl;
            for(int i=0;i<n*m;i++)
            {
                if(dis[i]>mid)
                {
                    v.pb(mp(i/m,i%m));
                }
            }
            ll left=1e18;
            ll lower=1e18;
            ll upper=0;
            ll right=0;
            for(int i=0;i<v.size();i++)
            {
                left=min(left,v[i].ff);
                right=max(right,v[i].ff);
                upper=max(upper,v[i].ss);
                lower=min(lower,v[i].ss);
            }
           // cout<<left<<" "<<right<<" "<<upper<<" "<<lower<<endl;
            ll x1=(left+right)/2;
            ll y1=(upper+lower)/2;
            ll x2=x1+1;
            ll y2=y1;
            ll x3=x1;
            ll y3=y1+1;
            ll x4=x1+1;
            ll y4=y1+1;
            bool f1=check(v,x1,y1,mid);
            bool f2=check(v,x2,y2,mid);
            bool f3=check(v,x3,y3,mid);
            bool f4=check(v,x4,y4,mid);
            if(f1==1 || f2==1 || f3==1 || f4==1)
            {
                ans=min(ans,mid);
                r=mid;
            }
            else
            {
                l=mid+1;
            }
            if(l==r)
            {
                if(f==0)
                    f=1;
                else
                    break;
            }
        }
        printf("Case #%lld: %lld\n",y,ans);
    }
    
    return 0;
}
    